/*
  This class has been generated by the Code Generator
 */

package com.opentext.apps.cc.analytics.aggregator.sql;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Objects;
import java.util.stream.Collectors;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.restclient.SAMLArtifactProvider;
import com.eibus.security.identity.UserIdentityFactory;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.util.system.EIBProperties;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opentext.apps.cc.analytics.ContractCenterAlertMessages;
import com.opentext.apps.cc.analytics.exceptions.ContractCenterApplicationException;

public class Utilities  {
	public static final String DOCUMENT_STORE_NS_1_0 = "http://schemas.cordys.com/documentstore/default/1.0";
	public static final String DOC_STORE_CORDYS_RESOURCE_NAME = "/store/storeconfiguration/authentication/CordysResource/ResourceName";
	public static final String DOC_STORE_CORDYS_RESOURCE_SPACE = "/store/storeconfiguration/authentication/CordysResource/Space";
	public static final String DOC_STORE_CONTENT_SERVER_RESOURCE_NAME = "//store/storeconfiguration/authentication/ContentServerResource/ResourceName";
	public static final String DOC_STORE_CONTENT_SERVER_RESOURCE_SPACE = "//store/storeconfiguration/authentication/ContentServerResource/Space";
	public static final String DOC_STORE_CONTENT_SERVER_SUPPORT_PATH = "//store/storeconfiguration/xECMDetails/SupportPath";
	private static final CordysLogger LOGGER = CordysLogger.getCordysLogger(Utilities.class);



	public static String getTableName(String solutionname, String entityname) {
		HttpURLConnection conn = null;
		String nodeUrl = EIBProperties.getProperty("com.cordys.node.url");
		//nodeUrl = "http://ccdevint.lab.opentext.com:5050";
		String orgDN = BSF.getOrganization();
		String orgName = orgDN.substring(orgDN.indexOf('=') + 1, orgDN.indexOf(','));

		
		if (nodeUrl != null && !nodeUrl.isEmpty()) {
			int responseCode = 0;
			URL url;
			String ctrAddPropsTableName;
			String documentUrl = nodeUrl + "/home/" + orgName + "/app/entityRestService/api/" + solutionname + "/entities/Contract/tableName";			
			
			try {				
				url = new URL(documentUrl);
				conn = (HttpURLConnection) url.openConnection();
				conn.setDoOutput(true);
				conn.setRequestMethod("GET");
				conn.setRequestProperty("SAMLart", getSamlArtifact(BSF.getUser()));
				
				InputStreamReader inputStreamReader = new InputStreamReader(conn.getInputStream());
				String reponse = new BufferedReader(inputStreamReader)
						   .lines().collect(Collectors.joining("\n"));

				responseCode = ((HttpURLConnection) conn).getResponseCode();
				if(responseCode == 200) {
					ObjectMapper mapper = new ObjectMapper();
					JsonNode jsonNode = mapper.readTree(reponse);
					JsonNode tableNameTextNode = jsonNode.get("tableName"); 
					
					if(Objects.nonNull(tableNameTextNode)) {						
						String contractTableName = tableNameTextNode.asText();
						ctrAddPropsTableName = contractTableName.substring(0, contractTableName.indexOf(solutionname));
						return(ctrAddPropsTableName.concat(solutionname).concat(entityname).toLowerCase());
					}
				}
			} catch (MalformedURLException e) {
				LOGGER._log("com.opentext.apps.cc.custom.Utilities", Severity.ERROR, e,
						ContractCenterAlertMessages.URL_IS_NOT_VALIED);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.URL_IS_NOT_VALIED);
			}catch (IOException e) {
				LOGGER._log("com.opentext.apps.cc.custom.Utilities", Severity.ERROR, e,
						ContractCenterAlertMessages.INPUT_SHOULD_NOT_BE_NULL);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.INPUT_SHOULD_NOT_BE_NULL);
			}
			finally {
				conn.disconnect();
			}
		}
		return null;
	}
	
	private static String getSamlArtifact(String userDn) {
        return SAMLArtifactProvider.getSAMLArtifact(UserIdentityFactory.getCordysIdentity(userDn));
    }
}

