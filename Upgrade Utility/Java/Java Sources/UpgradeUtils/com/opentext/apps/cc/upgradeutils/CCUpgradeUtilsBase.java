/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.cc.upgradeutils;

import java.io.File;
import java.nio.file.Paths;
import java.util.Objects;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.classinfo.ClassInfo;
import com.eibus.util.system.EIBProperties;

public abstract class CCUpgradeUtilsBase extends com.cordys.cpc.bsf.busobject.CustomBusObject {

	protected static final String DOWNLOAD_READ_PATH = "com.eibus.web.tools.download.DownloadReadPath";
	protected static final String SHEET_ERRORREPORT = "ErrorReport";
	// tags used in the XML document
	private static ClassInfo s_classInfo = null;

	public static ClassInfo _getClassInfo()// NOPMD framework ensures this is thread safe
	{
		if (s_classInfo == null)// NOPMD
		{
			s_classInfo = newClassInfo(CCUpgradeUtils.class);
			s_classInfo.setUIDElements(new String[] {});
		}
		return s_classInfo;
	}

	public CCUpgradeUtilsBase(BusObjectConfig config) {
		super(config);
	}
	
	
	public static String getNotificationZipPath() {
		String orgDN = BSF.getOrganization();
		String orgName = orgDN.substring(orgDN.indexOf('=') + 1, orgDN.indexOf(','));
		String OrgPath = Paths.get(EIBProperties.getInstallDir())
				.resolve("webroot" + File.separator + "organization" + File.separator + orgName + File.separator + "com"
						+ File.separator + "opentext" + File.separator + "apps" + File.separator + "notifications"
						+ File.separator + "samples" + File.separator + "Notifications.zip")
				.toString();
		if (new File(OrgPath).exists()) {
			return OrgPath;
		} else {
			String SharedPath = Paths.get(EIBProperties.getInstallDir())
					.resolve("webroot" + File.separator + "shared" + File.separator + "com" + File.separator
							+ "opentext" + File.separator + "apps" + File.separator + "notifications" + File.separator
							+ "samples" + File.separator + "Notifications.zip")
					.toString();
			if (new File(SharedPath).exists()) {
				return SharedPath;
			}
			return "";
		}
	}

//	public static String getDemoDataZipPath(String zipName) {
//		String orgDN = BSF.getOrganization();
//		String orgName = orgDN.substring(orgDN.indexOf('=') + 1, orgDN.indexOf(','));
//		String OrgPath = Paths.get(EIBProperties.getInstallDir())
//				.resolve("webroot" + File.separator + "organization" + File.separator + orgName + File.separator + "com"
//						+ File.separator + "opentext" + File.separator + "apps" + File.separator + "imports"
//						+ File.separator + "samples" + File.separator + zipName + ".zip")
//				.toString();
//		String SharedPath = Paths.get(EIBProperties.getInstallDir())
//				.resolve("webroot" + File.separator + "shared" + File.separator + "com" + File.separator
//						+ "opentext" + File.separator + "apps" + File.separator + "imports" + File.separator
//						+ "samples" + File.separator + zipName + ".zip").toString();
//		if (new File(OrgPath).exists()) {
//			return OrgPath;
//		} else {
//			
//			if (new File(SharedPath).exists()) {
//				return SharedPath;
//			}
//			return "";
//		}
//	}

	/**
	 * Read the value from cws.properties file and given as string.
	 * 
	 * @return path that ends with file separator.
	 */
//	public static String getDownloadReadPath() {
//		String downloadReadPath = EIBProperties.getProperty(DOWNLOAD_READ_PATH);
//		if (Objects.isNull(downloadReadPath) || downloadReadPath.isBlank()) {
//			downloadReadPath = EIBProperties.getInstallDir() + File.separator + "content" + File.separatorChar
//					+ "downloadcontent";
//		}
//		if (!downloadReadPath.endsWith(File.separator)) {
//			downloadReadPath += File.separator;
//		}
//		return downloadReadPath;
//	}

}
