/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.cc.custom;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.xml.nom.Node;


public class ObligationManagementUtil extends ObligationManagementUtilBase
{
    public ObligationManagementUtil()
    {
        this((BusObjectConfig)null);
    }

    public ObligationManagementUtil(BusObjectConfig config)
    {
        super(config);
    }

    public static BusObjectIterator<com.opentext.apps.cc.custom.ObligationManagementUtil> getObligationManagementUtilObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

	public static String processComplianceStatus(int complXMLNode, String isRecurrDone)
			throws SAXException, IOException, ParserConfigurationException, ParseException {
		// TODO implement body
		List<ComplObj> complObjs = new ArrayList<>();
		int mainNode = 0, parseNode = 0;
		int[] nodes;
		//int childNode = com.eibus.xml.nom.Node.getFirstChild(complXMLNode);
		String xmlData = com.eibus.xml.nom.Node.writeToString(complXMLNode, true);
		if (!Objects.isNull(xmlData)) {
			parseNode = Utilities.parseXML(xmlData);
			mainNode = Utilities.getNode(".//GetOBLComplianceDataResponse", parseNode);
			nodes = NomUtil.getNodeList(".//OBLComplianceData", mainNode);
			for (int j = 0; j < nodes.length; j++) {
				String procStatus = Node.getDataWithDefault(NomUtil.getNode(".//ProcessStatus", nodes[j]), null);
				String cmplStatus = Node.getDataWithDefault(NomUtil.getNode(".//ComplianceStatus", nodes[j]), null);
				String updatedDate= Node.getDataWithDefault(NomUtil.getNode(".//UpdatedTime", nodes[j]), null);
				String itemId2 = Node.getDataWithDefault(NomUtil.getNode(".//OBLComplianceData-id/ItemId2", nodes[j]),
						null);
				String id2 = itemId2.split("\\.")[3];
				String createdDate = Node.getDataWithDefault(NomUtil.getNode(".//Tracking/CreatedDate", nodes[j]),
						null);
				Date cdate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(createdDate);
				Date udate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").parse(updatedDate);
				complObjs.add(new ComplObj(cdate, Integer.parseInt(id2), procStatus, udate, cmplStatus, itemId2));
			}
			Comparator<ComplObj> comparator = Comparator.comparing(ComplObj::getId2)
					.thenComparing(ComplObj::getCreatedDate);
			Collections.sort(complObjs, comparator);
			isRecurrDone = isRecurrDone.equals("Completed")?"YES":(isRecurrDone.length()>0 ? "NO":"NOTRECURR");
			return chckConditions(complObjs, isRecurrDone);
		}
		return "InvalidInput";
	}
	
	private static String chckConditions(List<ComplObj> complObjs, String isRecurrDone) {

		Map<String, Integer> defaultMap = new HashMap<>();
		defaultMap.put("Open", 0);
		defaultMap.put("Met-Override", 1);
		defaultMap.put("Met-Corrected", 2);
		defaultMap.put("Met", 3);
		defaultMap.put("Met-PostEscalation", 4);
		defaultMap.put("InProgress", 5);
		defaultMap.put("InProgress-Escalated", 6);
		defaultMap.put("Met-ReviewInProgress", 7);
		defaultMap.put("NotMet-ReviewInProgress", 8);
		defaultMap.put("NotMet", 9);

		String finalStatus = "Open", complDataItemID2=null;
		//int countSuccess = 0;
		//Date notMetDate = null; deprecated
		for (ComplObj complObj : complObjs) {
			String eachComplStatus = complObj.getProcStatus();
			if (eachComplStatus.equals("Open") && defaultMap.get(finalStatus) < 1) {
				finalStatus = eachComplStatus;
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("InProgress") && defaultMap.get(finalStatus) <= 5) {
				finalStatus = "InProgress";
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("InProgress-Escalated") && defaultMap.get(finalStatus) <= 6) {
				finalStatus = "InProgress-Escalated";
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("Completed") && (complObj.getCmplStat()==null || complObj.getCmplStat().equals("Met")) && defaultMap.get(finalStatus) <= 3) {
				finalStatus = "Met";
				//countSuccess++;
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("Completed-PostEscalation") && defaultMap.get(finalStatus) <= 4) {
				finalStatus = "Met-PostEscalation";
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("Met-ReviewInProgress") && defaultMap.get(finalStatus) <= 7) {
				finalStatus = "Met-ReviewInProgress";
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("NotMet-ReviewInProgress") && defaultMap.get(finalStatus) <= 8) {
				finalStatus = "NotMet-ReviewInProgress";
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("Completed") && complObj.getCmplStat().equals("NotMet") && defaultMap.get(finalStatus) <= 9) {
				finalStatus = "NotMet";complDataItemID2 = complObj.getItemID2();
				//notMetDate = (notMetDate != null && notMetDate.compareTo(complObj.getUpdatedDate()) > 0) ? notMetDate
				//		: complObj.getUpdatedDate();
			} else if (eachComplStatus.equals("Completed-Override") && defaultMap.get(finalStatus) <= 9) {
				finalStatus = "Met-Override";
				//notMetDate = null;
				complDataItemID2 = complObj.getItemID2();
			} else if (eachComplStatus.equals("Completed-Corrected") && defaultMap.get(finalStatus) == 9) {//&& notMetDate.compareTo(complObj.getUpdatedDate()) < 1
				finalStatus = "Met-Corrected";complDataItemID2 = complObj.getItemID2();
				//notMetDate = null;
			}

		}
		
		if(isRecurrDone.equals("NO")) {
			switch(finalStatus) {
			case "Met":
				finalStatus = "Met-PendingRecurrences";
				break;
			case "NotMet":
				finalStatus = "NotMet-PendingRecurrences";
				break;
			case "Met-Override":
				finalStatus = "Met-Override-PendingRecurrences";
				break;
			case "Met-Corrected":
				finalStatus = "Met-Corrected-PendingRecurrences";
				break;
			case "Met-PostEscalation":
				finalStatus = "Met-PostEscalation-PendingRecurrences";	
				break;
			}
		}/*else if(isRecurrDone.equals("YES")) {
			finalStatus = (countSuccess == complObjs.size()) ? "Met-InRecurrence" : finalStatus;
		}*/
		return finalStatus+";"+complDataItemID2;
	}

	private static class ComplObj {
		private Date createdDate;
		private int id2;
		private String itemID2;
		private String procStatus;
		private Date updatedDate;
		private String cmplStat=null;

		public ComplObj(Date cdate, int integerField, String status, Date udate, String cmplStat, String itemID2 ) {
			this.createdDate = cdate;
			this.id2 = integerField;
			this.itemID2 = itemID2;
			this.procStatus = status;
			this.updatedDate = udate;
			this.cmplStat = cmplStat;
		}

		public Date getCreatedDate() {
			return createdDate;
		}

		public String getProcStatus() {
			return procStatus;
		}
		
		public String getCmplStat() {
			return cmplStat;
		}

		public int getId2() {
			return id2;
		}
		
		public String getItemID2() {
			return itemID2;
		}
		
		public Date getUpdatedDate() {
			return updatedDate;
		}
	}

    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}
