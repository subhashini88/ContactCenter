/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.cc.custom;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.cordys.cpc.bsf.util.DataConverter;
import com.cordys.security.otds.ticketclient.OTDSResourceTicket;
import com.cordys.security.otds.ticketclient.OTDSTicketClientFactory;
import com.eibus.directory.soap.LDAPDefinition;
import com.eibus.security.identity.Identity;
import com.eibus.security.identity.UserIdentityFactory;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.util.system.Space;
import com.eibus.xml.nom.Node;
import com.eibus.xml.xpath.XPath;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opentext.apps.cc.custom.exceptions.ContractCenterAlertMessages;
import com.opentext.apps.cc.custom.exceptions.ContractCenterApplicationException;

public class xECMUtilities extends xECMUtilitiesBase {
	private static final CordysLogger logger = CordysLogger.getCordysLogger(xECMUtilities.class);
	private static Map<String, String> docStoreConfig;

	public xECMUtilities() {
		this((BusObjectConfig) null);
	}

	public xECMUtilities(BusObjectConfig config) {
		super(config);
	}

	public static String addRelationtoBW(int bw_id, int rel_bw_id, String rel_type) {
		HttpURLConnection conn = null;
		String OTDSTicket = null;
		int responseCode = 0;
		try {
			OTDSTicket = getOTDSTicket();
			OutputStream os = null;
			try {
				if (docStoreConfig == null) {
					docStoreConfig = getResourceValues();
				}
				if (Objects.nonNull(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH))) {

					URL url = new URL(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH)
							+ "/api/v2/businessworkspaces/" + bw_id + "/relateditems");
					conn = (HttpURLConnection) url.openConnection();
					conn.setDoOutput(true);
					conn.setRequestMethod("POST");
					conn.setRequestProperty("OTDSTicket", OTDSTicket);
					conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
					os = conn.getOutputStream();
					os.write(("rel_bw_id=" + rel_bw_id).getBytes());
					os.flush();
					os.close();
					responseCode = ((HttpURLConnection) conn).getResponseCode();
				}

			} catch (MalformedURLException e) {
				logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
			} catch (IOException e) {
				logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
			} finally {
				if (Objects.nonNull(os)) {
					os.close();
				}
				if (Objects.nonNull(conn)) {
					conn.disconnect();
				}
			}
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
			throw new ContractCenterApplicationException(
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
		}

		return String.valueOf(responseCode);
	}

	public static String checkForBW(String bw_id) {
		HttpURLConnection conn = null;
		String OTDSTicket = null;
		int responseCode = 0;
		try {
			OTDSTicket = getOTDSTicket();
			try {
				if (docStoreConfig == null) {
					docStoreConfig = getResourceValues();
				}

				if (Objects.nonNull(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH))) {
					URL url = new URL(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH)
							+ "/api/v1/businessworkspaces/" + bw_id);
					conn = (HttpURLConnection) url.openConnection();
					conn.setDoOutput(true);
					conn.setRequestMethod("GET");
					conn.setRequestProperty("OTDSTicket", OTDSTicket);
					conn.setRequestProperty("Content-Type", "application/json");
					responseCode = ((HttpURLConnection) conn).getResponseCode();
				}
			} catch (MalformedURLException e) {
				logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
			} catch (IOException e) {
				logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
			} finally {
				if (Objects.nonNull(conn)) {
					conn.disconnect();
				}
			}
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
			throw new ContractCenterApplicationException(
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_ADD_RELATIONTOBW);
		}

		return String.valueOf(responseCode);
	}

	public static String delRelationOfBW(int bw_id, int rel_bw_id, String rel_type) {
		HttpURLConnection conn = null;
		String OTDSTicket = null;
		int responseCode = 0;
		try {
			if (OTDSTicket == null) {
				OTDSTicket = getOTDSTicket();
			}
			try {
				if (docStoreConfig == null) {
					docStoreConfig = getResourceValues();
				}
				if (Objects.nonNull(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH))) {
					URL url = new URL(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH)
							+ "/api/v2/businessworkspaces/" + bw_id + "/relateditems/" + rel_bw_id);
					conn = (HttpURLConnection) url.openConnection();
					conn.setDoOutput(true);
					conn.setRequestMethod("DELETE");
					conn.setRequestProperty("OTDSTicket", OTDSTicket);
					conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
					responseCode = ((HttpURLConnection) conn).getResponseCode();
				}

			} catch (MalformedURLException e) {
				logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
			} catch (IOException e) {
				logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
				throw new ContractCenterApplicationException(
						ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
			} finally {
				if (Objects.nonNull(conn)) {
					conn.disconnect();
				}
			}
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
			throw new ContractCenterApplicationException(
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
		}

		return String.valueOf(responseCode);
	}

	public static String getOTDSTicket() {
		if (docStoreConfig == null) {
			docStoreConfig = getResourceValues();
		}
		OTDSResourceTicket resourceTicket = OTDSTicketClientFactory.getInstance().createTicket(getIdentity(),
				Space.fromString(docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_RESOURCE_SPACE)),
				docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_RESOURCE_NAME));

		return resourceTicket.getTicket();
	}

	public static Identity getIdentity() {
		final String organizationName = DataConverter.getOrganizationName(BSF.getOrganization());
		final String userName = DataConverter.getUserName(BSF.getUser());

		return UserIdentityFactory
				.getCordysIdentity(LDAPDefinition.getOrganizationalUserDN(userName, organizationName));
	}

	public static Map<String, String> getResourceValues() {
		Map<String, String> docStoreConfig = new HashMap<String, String>();
		int response = 0;
		int store = 0;
		try {
			SOAPRequestObject sro = new SOAPRequestObject(xECMConstants.DOCUMENT_STORE_NS_1_0,
					"GetDocumentStoreSummary", null, null);
			response = sro.execute();
			String storeDetails = Node.getDataWithDefault(XPath.getFirstMatch("//StoreDetails", null, response), null);
			if (!Utilities.isStringEmpty(storeDetails)) {
				store = NomUtil.parseXML(storeDetails);
				docStoreConfig.put(xECMConstants.DOC_STORE_CORDYS_RESOURCE_NAME, Node.getDataWithDefault(
						XPath.getFirstMatch(xECMConstants.DOC_STORE_CORDYS_RESOURCE_NAME, null, store), null));
				docStoreConfig.put(xECMConstants.DOC_STORE_CORDYS_RESOURCE_SPACE, Node.getDataWithDefault(
						XPath.getFirstMatch(xECMConstants.DOC_STORE_CORDYS_RESOURCE_SPACE, null, store), null));
				docStoreConfig.put(xECMConstants.DOC_STORE_CONTENT_SERVER_RESOURCE_NAME, Node.getDataWithDefault(
						XPath.getFirstMatch(xECMConstants.DOC_STORE_CONTENT_SERVER_RESOURCE_NAME, null, store), null));
				docStoreConfig.put(xECMConstants.DOC_STORE_CONTENT_SERVER_RESOURCE_SPACE, Node.getDataWithDefault(
						XPath.getFirstMatch(xECMConstants.DOC_STORE_CONTENT_SERVER_RESOURCE_SPACE, null, store), null));
				docStoreConfig.put(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH, Node.getDataWithDefault(
						XPath.getFirstMatch(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH, null, store), null));
			}
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
			throw new ContractCenterApplicationException(
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_REMOVE_RELATION_FROM_BW);
		} finally {
			Utilities.cleanAll(response, store);
		}

		return docStoreConfig;
	}

	public static String createNodeinCS(String type, String parent_id, String original_id, String name) {
		String conn_result = null;
		if (docStoreConfig == null) {
			docStoreConfig = getResourceValues();
		}
		final HttpPost httpPost = new HttpPost(
				docStoreConfig.get(xECMConstants.DOC_STORE_CONTENT_SERVER_CGI_PATH) + "/api/v2/nodes");
		final List<NameValuePair> params = new ArrayList<NameValuePair>();
		params.add(new BasicNameValuePair(xECMConstants.NODE_TYPE, type));
		params.add(new BasicNameValuePair(xECMConstants.NODE_PARENT_ID, parent_id));
		params.add(new BasicNameValuePair(xECMConstants.NODE_NAME, name));
		if (Objects.nonNull(original_id)) {
			params.add(new BasicNameValuePair(xECMConstants.NODE_ORIGINAL_ID, original_id));
		}

		try {
			httpPost.setEntity(new UrlEncodedFormEntity(params));

			httpPost.setHeader(xECMConstants.AUTH_OTDSTICKET, getOTDSTicket());

			CloseableHttpClient client = HttpClients.createDefault();
			CloseableHttpResponse response = (CloseableHttpResponse) client.execute(httpPost);

			int statusCode = response.getStatusLine().getStatusCode();
			if (statusCode == HttpStatus.SC_OK) {
				String responseBody = EntityUtils.toString(response.getEntity());
				ObjectMapper mapper = new ObjectMapper();
				JsonNode jsonNode = mapper.readTree(responseBody);
				JsonNode nodeIDJson = jsonNode.path("results").path("data").path("properties").get("id");
				conn_result = nodeIDJson.asText();
			} else {
				conn_result = "NODE_CREATION_FAILED";
			}
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.xECMUtilities", Severity.ERROR, e,
					ContractCenterAlertMessages.RESTSERVICE_FAILURE_CREATE_NODE);
			throw new ContractCenterApplicationException(ContractCenterAlertMessages.RESTSERVICE_FAILURE_CREATE_NODE);
		}
		return conn_result;
	}

	public static BusObjectIterator<com.opentext.apps.cc.custom.xECMUtilities> getXECMUtilitiesObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
