/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.cc.custom;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;

import com.cordys.cpc.bsf.busobject.BSF;
import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.xml.nom.Node;
import com.opentext.apps.cc.custom.fileutils.FileUtil;
import com.opentext.apps.cc.custom.fileutils.NomUtil;
import com.opentext.apps.cc.custom.fileutils.WorkBookManager;
import com.opentext.apps.cc.custom.fileutils.WorkBookManagerImpl;


public class ExportUtilities extends ExportUtilitiesBase
{
	private static final CordysLogger logger = CordysLogger.getCordysLogger(ExportUtilities.class);
    public ExportUtilities()
    {
        this((BusObjectConfig)null);
    }

    public ExportUtilities(BusObjectConfig config)
    {
        super(config);
    }
    
    public static String downloadExcel(int inputXML) throws JsonMappingException, JsonProcessingException {
		byte[] fileContent = generateReport(getAllContractRecords(inputXML));
		return Base64.getEncoder().encodeToString(fileContent);
    }
    
	protected static byte[] generateReport(List<Map<String, String>> contractDataList) {
		String orgDN = BSF.getOrganization();
		String orgName = orgDN.substring(orgDN.indexOf('=') + 1, orgDN.indexOf(','));
		ByteArrayOutputStream bos = null;
		String sheetName = "Contracts";
		int rowIndex = 0;
		if (Objects.nonNull(contractDataList) && !contractDataList.isEmpty()) {
			try {
				String filePath = FileUtil.getDownloadReadPath() + orgName + File.separator + "ExportedContracts"
						+ File.separator + "Contracts.xlsx";
				WorkBookManager wbManager = new WorkBookManagerImpl(Paths.get(filePath));
				final Workbook wb = wbManager.getWorkBook();
				//Change:
					if (Objects.nonNull(contractDataList) && !contractDataList.isEmpty()) {
						Sheet sheet = wbManager.createSheet(sheetName);
						Iterator<Map<String, String>> rows = contractDataList.iterator();
						wbManager.createRow(sheet, rows.next().values(), wbManager.createHeaderStyle(wb), rowIndex);
						
						while (rows.hasNext()) {
							Collection<String> rowData = rows.next().values();
							wbManager.createRow(sheet, rowData, null, ++rowIndex);
						}
					}
				bos = new ByteArrayOutputStream();
				wb.write(bos);
			} catch (IOException e) {
				logger._log("com.opentext.apps.cc.upgradeutils.CCUpgradeUtils", Severity.ERROR, e,
						"Error while executing generateErrorReports");
			}
		}
		if (null != bos) {
			return bos.toByteArray();
		} else {
			return null;
		}

	}
	
	private static List<Map<String, String>> getAllContractRecords(int inputXML) throws JsonMappingException, JsonProcessingException {
		
		int[] nodes;
		String jsonDataAsString = null;
		ObjectMapper mapper = new ObjectMapper();
		Map<String, String> contractData = new LinkedHashMap<>();

		List<Map<String, String>> sheetData = new ArrayList<>();
		nodes = NomUtil.getNodeList(".//contract", inputXML);
		
		for(int node : nodes) {	
			jsonDataAsString = Node.getDataWithDefault(node, "{}");
			contractData = mapper.readValue(jsonDataAsString, Map.class);
			sheetData.add(contractData);
		}
		return sheetData;
	}

    public static BusObjectIterator<com.opentext.apps.cc.custom.ExportUtilities> getExportUtilitiesObjects(com.cordys.cpc.bsf.query.Cursor cursor)
    {
        // TODO implement body
        return null;
    }

    public void onInsert()
    {
    }

    public void onUpdate()
    {
    }

    public void onDelete()
    {
    }

}
