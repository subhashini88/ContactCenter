/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.cc.custom;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;

import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Objects;

import org.apache.commons.lang3.ArrayUtils;

import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.xml.nom.Node;
//import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.opentext.apps.cc.custom.exceptions.ContractCenterAlertMessages;

public class StoreJSON extends StoreJSONBase {

	private final static String WORKLIST_KEY = "worklist_id";
	private static final CordysLogger logger = CordysLogger.getCordysLogger(StoreJSONBase.class);
	private static String workList_ID=null;

	public StoreJSON() {
		this((BusObjectConfig) null);
	}

	public StoreJSON(BusObjectConfig config) {
		super(config);
	}

	/*
	private static int getAllCustAttributes(String contractItemID) {
		int response = 0;
		try {
			SOAPRequestObject custAttrRequest = new SOAPRequestObject(
					"http://schemas.opentext.com/apps/contractcenter/16.3", "GetMappedCustomAttributes", null, null);
			int contractItemIdNode = NomUtil.parseXML("<ContractItemId>" + contractItemID + "</ContractItemId>");
			custAttrRequest.addParameterAsXml(contractItemIdNode);
			response = custAttrRequest.sendAndWait();
		}catch(Exception e) {
			logger._log("com.opentext.apps.cc.custom.Utilities", Severity.ERROR, e,
					ContractCenterAlertMessages.WEBSERVICE_FAILURE_GET_CUSTOM_ATTRIBUTES);
		}
		finally {
			Utilities.cleanAll(response);
		}
		return response;
	}
	*/
	
	private static String[] formFixedAttrJSON(int generalAttrXML, String ctrAddlPropsID) {
		String [] genFixedAttrJSON = {"{}" , "{}"};
		String oldFixedPropJson=null;
		String propName, ctrValue, propXpath, propDataType;
		try {
			oldFixedPropJson = getFixedPropJson(ctrAddlPropsID);
			if(oldFixedPropJson!=null) {
				ObjectMapper objectMapper = new ObjectMapper();
	            JsonNode jsonNode = objectMapper.readTree(oldFixedPropJson);
	            for (Map.Entry<String, String[]> entry : ContractConstants.fixedContractPropsMap.entrySet()) {
	                propName = entry.getKey();
					propXpath =entry.getValue()[0];
					propDataType = entry.getValue()[1];
					ctrValue = Node.getDataWithDefault(NomUtil.getNode(propXpath, generalAttrXML), null);
					// Modify a specific key and value
		            ((ObjectNode) jsonNode).put(propName, formatValue(ctrValue, propDataType));
	            }
	            genFixedAttrJSON[1] = objectMapper.writeValueAsString(jsonNode);
			}
			
		}catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}
		return genFixedAttrJSON;
	}

	private static String[] formGeneralAttrJSON(int generalAttrXML, String attrType){

		int nodes[] = null, purpose = 0, processName = 0;
		String propName, ctrValue, propXpath, propDataType;//genAttrJSON = "{}";
		String [] genFixedAttrJSON = {"{}" , "{}"};
		ObjectMapper objMapper = new ObjectMapper();
		Map<String, String> allGeneralAttrMap = new LinkedHashMap<>();
		Map<String, String> allFixedAttrMap = new LinkedHashMap<>();
		try {
			SOAPRequestObject GCPropsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextBasicComponents/GCProcess.RelatedGCProps/operations",
					"GetGCProcessPropByProcessName", null, null);
			purpose = NomUtil.parseXML("<purpose>" + "" + "</purpose>");
			processName = NomUtil.parseXML("<processName>" + "Contract" + "</processName>");
			GCPropsRequest.addParameterAsXml(processName);
			GCPropsRequest.addParameterAsXml(purpose);

			nodes = NomUtil.getNodeList(".//RelatedGCProps", GCPropsRequest.sendAndWait());

			for (int i : nodes) {
				propName = Node.getDataWithDefault(NomUtil.getNode(".//Name", i), null);
				propXpath = Node.getDataWithDefault(NomUtil.getNode(".//Xpath", i), null);
				propDataType = Node.getDataWithDefault(NomUtil.getNode(".//DataType", i), null);
				ctrValue = Node.getDataWithDefault(NomUtil.getNode(propXpath, generalAttrXML), null);
				
				if ( ArrayUtils.contains( ContractConstants.FIXEDCONTRACTPROPS, propName ) && attrType.equalsIgnoreCase(ContractConstants.ALL) ) {
					if(propName.equals("ContractDocumentType")) {
						ctrValue = ctrValue.equals("EXTERNALDOCUMENT") ? "true":"false";						
					}
					allFixedAttrMap.put(propName, ctrValue);
				}else if(!ArrayUtils.contains( ContractConstants.FIXEDCONTRACTPROPS, propName )) {
					allGeneralAttrMap.put(propName, formatValue(ctrValue, propDataType));
					if(propName.equals("AutoRenewDuration")) {
						allGeneralAttrMap.put("AutoRenewDurationCal", calDuration(ctrValue, propDataType));
					}else if(propName.equals("InitialContractTenure")) {
						allGeneralAttrMap.put("InitialContractTenureCal", calDuration(ctrValue, propDataType));
					}
				}
			}
			ctrValue = Node.getDataWithDefault(NomUtil.getNode(".//RelatedOrganization//Id", generalAttrXML), null);
			String workListItemId = getWorkListIdOfOrg(Integer.parseInt(ctrValue));
			allGeneralAttrMap.put(WORKLIST_KEY, workListItemId);
			workList_ID  = workListItemId;
			//allFixedAttrMap.put(WORKLIST_KEY, workListItemId);
			
			genFixedAttrJSON[0] = objMapper.writeValueAsString(allGeneralAttrMap);
			genFixedAttrJSON[1] = objMapper.writeValueAsString(allFixedAttrMap);
			
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			if(null != nodes) {
				Utilities.cleanAll(purpose, processName);
			}
		}
		
		return genFixedAttrJSON;
	}
	
	private static String formatValue(String value, String dataType) {
		if(!Objects.isNull(value) && !Objects.isNull(dataType)) {
			if(dataType.equalsIgnoreCase(ContractConstants.DATE)) {
				value = Utilities.parseDate(value);
			}else if(dataType.equalsIgnoreCase(ContractConstants.DURATION)) {	
				value = Utilities.parseDurationToMonths(value);
			}else if(dataType.equalsIgnoreCase(ContractConstants.LONGTEXT) && value.length() > 1024) {
				value = value.substring(0, 1024);
			}
		}
		return value;	
	}
	
	private static String calDuration(String value, String dataType) {
		if(!Objects.isNull(value) && !Objects.isNull(dataType)) {
			if(dataType.equalsIgnoreCase(ContractConstants.DURATION)) {	
				int monthsInd = value.indexOf('M'), daysInd = value.indexOf('D');
				int startInd = 1, days=0;
				String months_str = "0", days_str = "0";
				if(monthsInd > 0) {	
					months_str = value.substring(startInd, monthsInd);
				}if(daysInd > 0) {
					days_str = value.substring(monthsInd > 0 ? monthsInd+1 : startInd, daysInd);
				}
				days = Integer.parseInt(months_str)*30 + Integer.parseInt(days_str);
				return String.valueOf(days);
			}
		}
		return value;	
	}
	
	private static String formatValueForCustAttr(String value, String dataType) {
		
		if(!Objects.isNull(dataType) && dataType.equalsIgnoreCase(ContractConstants.BOOLEAN) && Objects.isNull(value)) {
			return "false";
		}	
		else if(!Objects.isNull(value) && !Objects.isNull(dataType)) {
			if(dataType.equalsIgnoreCase(ContractConstants.DATE)) {
				value = Utilities.parseDate(value);
			}else if(dataType.equalsIgnoreCase(ContractConstants.DURATION)) {	
				value = Utilities.parseDurationToMonths(value);
			}else if(dataType.equalsIgnoreCase(ContractConstants.LONGTEXT) && value.length() > 1024) {
				value = value.substring(0, 1024);
			}
		}
		return value;	
	}

	private static String getWorkListIdOfOrg(int orgId) {
		
		int CTRAddlPropsId = 0;
		
		try {
			SOAPRequestObject readOrganizationRequest = new SOAPRequestObject(
					"http://schemas/OpenTextBasicComponents/GCOrganization/operations", "ReadGCOrganization", null,
					null);
			CTRAddlPropsId = NomUtil.parseXML("<GCOrganization-id></GCOrganization-id>");
			Node.setDataElement(CTRAddlPropsId, "Id", orgId + "");
			readOrganizationRequest.addParameterAsXml(CTRAddlPropsId);
			
			int UpdateCTRAddlPropsResp = readOrganizationRequest.sendAndWait();
			String itemId = Node.getDataWithDefault(
					NomUtil.getNode(".//GCOrganization//RelatedWorklist//WorkList-id//ItemId", UpdateCTRAddlPropsResp),
					null);
			return itemId;
		}catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			Utilities.cleanAll(CTRAddlPropsId);
		}
		return null;
	}

	private static String formCustomAttrJSON(int custAttrResponse, String contractItemID) {
		
		int nodes[] = null;

		ObjectMapper objMapper = new ObjectMapper();
		Map<String, String> allCustAttrMap = new LinkedHashMap<>();
		String customAttrJSON = "{}";
		int getAllCustAttributesResp = 0;

		try {
			nodes = NomUtil.getNodeList(".//RelatedAttributes", custAttrResponse);
			
			if(nodes.length == 0) {
				
				SOAPRequestObject custAttrRequest = new SOAPRequestObject(
						"http://schemas.opentext.com/apps/contractcenter/16.3", "GetMappedCustomAttributes", null, null);
				int contractItemIdNode = NomUtil.parseXML("<ContractItemId>" + contractItemID + "</ContractItemId>");
				custAttrRequest.addParameterAsXml(contractItemIdNode);
				getAllCustAttributesResp = custAttrRequest.sendAndWait();
				
				populateallCustAttrMap(allCustAttrMap,NomUtil.getNodeList(".//RelatedAttributes", getAllCustAttributesResp), false);
				nodes = NomUtil.getNodeList(".//CustomAttribute", custAttrResponse);
				populateallCustAttrMap(allCustAttrMap, nodes, true);
			}else {			
				populateallCustAttrMap(allCustAttrMap, nodes, false);
			}
			customAttrJSON = objMapper.writeValueAsString(allCustAttrMap);;
		} catch (Exception e) {
				logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
						ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			if(null != nodes) {
				Utilities.cleanAll(getAllCustAttributesResp);
				Utilities.cleanAll(nodes);
			}
		}
		return customAttrJSON;
	}
	
	private static void populateallCustAttrMap(Map<String, String> allCustAttrMap, int[] nodes, boolean isUpdate) {
		
		String propName, ctrValue, propDataType;
		String VALUE = "Value", NAME = "Name", DATATYPE = "DataType";
		if(isUpdate) {
			VALUE = "value"; NAME = "name"; DATATYPE = "dataType";
		}
		
		for (int node : nodes) {
			propName = Node.getDataWithDefault(NomUtil.getNode(NAME, node), null);
			ctrValue = Node.getDataWithDefault(NomUtil.getNode(VALUE, node), null);
			propDataType = Node.getDataWithDefault(NomUtil.getNode(DATATYPE, node), null);
			formatValueForCustAttr(ctrValue, propDataType);
			allCustAttrMap.put(propName, ctrValue);
		}
	}
	
	private static String getRelatedCtrAddPropsId(String contractItemID) {
		
		String CTRAddlPropsItemId1 = null;
		int contractIDNode = 0, getCTRAddlPropsResponse = 0;
		
		try {
			SOAPRequestObject getCTRAddlPropsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractCenter/Contract/operations", "ReadContract", null, null);
			contractIDNode = NomUtil.parseXML("<Contract-id></Contract-id>");
			Node.setDataElement(contractIDNode, "ItemId", contractItemID);
			getCTRAddlPropsResponse = getCTRAddlPropsRequest.sendAndWait();
			CTRAddlPropsItemId1 = Node.getDataWithDefault(
					NomUtil.getNode(".//CTRAddlProps/CTRAddlProps-id/ItemId1", getCTRAddlPropsResponse), null);
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			Utilities.cleanAll(contractIDNode, getCTRAddlPropsResponse);
		}
		
		return CTRAddlPropsItemId1;
	}
	
private static String getFixedPropJson(String ctrAddlPropsID) {
		
		String ctrFixedPropJson = null;
		int contractIDNode = 0, getFixedPropResponse = 0;
		
		try {
			SOAPRequestObject getFixedPropRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractCenter/Contract.CTRAddlProps/operations", "ReadCTRAddlProps", null, null);
			int CTRAddlPropsId = NomUtil.parseXML("<CTRAddlProps-id></CTRAddlProps-id>");
			Node.setDataElement(CTRAddlPropsId, "ItemId1", ctrAddlPropsID);
			getFixedPropRequest.addParameterAsXml(CTRAddlPropsId);
			getFixedPropResponse = getFixedPropRequest.sendAndWait();
			ctrFixedPropJson = Node.getDataWithDefault(
					NomUtil.getNode(".//CTRAddlProps//FixedPropJSON", getFixedPropResponse), null);
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			Utilities.cleanAll(contractIDNode, getFixedPropResponse);
		}
		
		return ctrFixedPropJson;
	}

	private static void createCTRAddlPropsJSON(String contractItemID, String[] genFixedAttrJSON,
			String custAttrJSONString) {

		String CTRAddlPropsItemId1 = null;
		int contractIDNode = 0,CTRAddlPropsNode = 0,createCTRAddlPropsResp = 0, relatedCTRPropsNode = 0, 
				ctrPropsIdNode = 0, setRelatedCTRAddlPropsResp = 0;
		
		try {
			SOAPRequestObject createCTRAddlPropsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractCenter/Contract/operations", "CreateCTRAddlProps", null, null);
			contractIDNode = NomUtil.parseXML("<Contract-id></Contract-id>");
			Node.setDataElement(contractIDNode, "ItemId", contractItemID);
			CTRAddlPropsNode = NomUtil.parseXML("<CTRAddlProps-create></CTRAddlProps-create>");
			
			Node.setDataElement(CTRAddlPropsNode, "CTRPropJSON", genFixedAttrJSON[0]);
			Node.setDataElement(CTRAddlPropsNode, "CustPropJSON", custAttrJSONString);
			Node.setDataElement(CTRAddlPropsNode, "FixedPropJSON", genFixedAttrJSON[1]);
			if(null!=workList_ID) {
				Node.setDataElement(CTRAddlPropsNode, "Z_INT_WorklistID", workList_ID);
				workList_ID = null;
			}
			createCTRAddlPropsRequest.addParameterAsXml(contractIDNode);
			createCTRAddlPropsRequest.addParameterAsXml(CTRAddlPropsNode);
			createCTRAddlPropsResp = createCTRAddlPropsRequest.sendAndWait();

			CTRAddlPropsItemId1 = Node.getDataWithDefault(
					NomUtil.getNode(".//CTRAddlProps/CTRAddlProps-id/ItemId1", createCTRAddlPropsResp), null);

			SOAPRequestObject setRelatedCTRAddlPropsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractCenter/Contract/operations", "SetRelatedCTRProps", null, null);
			relatedCTRPropsNode = NomUtil.parseXML("<RelatedCTRProps></RelatedCTRProps>");
			ctrPropsIdNode = NomUtil.parseXML("<CTRAddlProps-id></CTRAddlProps-id>");
			Node.setDataElement(ctrPropsIdNode, "ItemId1", CTRAddlPropsItemId1);

			Node.appendToChildren(ctrPropsIdNode, relatedCTRPropsNode);

			setRelatedCTRAddlPropsRequest.addParameterAsXml(contractIDNode);
			setRelatedCTRAddlPropsRequest.addParameterAsXml(relatedCTRPropsNode);

			setRelatedCTRAddlPropsResp = setRelatedCTRAddlPropsRequest.sendAndWait();
		}catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			Utilities.cleanAll(contractIDNode,CTRAddlPropsNode,createCTRAddlPropsResp, 
					relatedCTRPropsNode, ctrPropsIdNode, setRelatedCTRAddlPropsResp);
			}
	}

	private static void updateCTRAddlPropsJSON(String contractItemID, String ctrAddlPropsID, String[] genFixedAttrJSON,
			String custAttrJSONString, String attrType) {
		int CTRAddlPropsNode = 0, contractIDNode = 0;

		try {
			SOAPRequestObject UpdateCTRAddlPropsRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractCenter/Contract.CTRAddlProps/operations", "UpdateCTRAddlProps", null,
					null);

			int CTRAddlPropsId = NomUtil.parseXML("<CTRAddlProps-id></CTRAddlProps-id>");
			Node.setDataElement(CTRAddlPropsId, "ItemId1", ctrAddlPropsID);

			CTRAddlPropsNode = NomUtil.parseXML("<CTRAddlProps-update></CTRAddlProps-update>");
			//Depreacated updating only contract id bcz of CONCEN-15913 issue
			//relatedContractNode = NomUtil.parseXML("<RelatedContract></RelatedContract>");
			//contractIDNode = NomUtil.parseXML("<Contract-id></Contract-id>");
			//Node.setDataElement(contractIDNode, "ItemId", contractItemID);
			//Node.appendToChildren(contractIDNode, relatedContractNode);
			//Node.appendToChildren(relatedContractNode, CTRAddlPropsNode);
			
			/*if (!attrType.equalsIgnoreCase(ContractConstants.FIXED)) {
				if (!attrType.equalsIgnoreCase(ContractConstants.GENERAL)) {
					Node.setDataElement(CTRAddlPropsNode, "CustPropJSON", custAttrJSONString);
				}
				if (!attrType.equalsIgnoreCase(ContractConstants.CUSTOM)) {
					Node.setDataElement(CTRAddlPropsNode, "CTRPropJSON", genFixedAttrJSON[0]);
				if(processType.equals(ContractConstants.UPGRADE_PROCESS)|| processType.equals(ContractConstants.ON_CREATE)) {
					Node.setDataElement(CTRAddlPropsNode, "FixedPropJSON", genFixedAttrJSON[1]);
				}
				}
			}
			if (attrType.equalsIgnoreCase(ContractConstants.FIXED)
					|| attrType.equalsIgnoreCase(ContractConstants.ALL)) {
				Node.setDataElement(CTRAddlPropsNode, "FixedPropJSON", genFixedAttrJSON[1]);
			}*/
			
			if(attrType.equalsIgnoreCase(ContractConstants.GENERAL)) {
				Node.setDataElement(CTRAddlPropsNode, "CTRPropJSON", genFixedAttrJSON[0]);
			}else if(attrType.equalsIgnoreCase(ContractConstants.CUSTOM)) {
				Node.setDataElement(CTRAddlPropsNode, "CustPropJSON", custAttrJSONString);
			}else if(attrType.equalsIgnoreCase(ContractConstants.FIXED)) {
				Node.setDataElement(CTRAddlPropsNode, "FixedPropJSON", genFixedAttrJSON[1]);
			}else if(attrType.equalsIgnoreCase(ContractConstants.BOTH)) {
				Node.setDataElement(CTRAddlPropsNode, "CTRPropJSON", genFixedAttrJSON[0]);
				Node.setDataElement(CTRAddlPropsNode, "CustPropJSON", custAttrJSONString);
			}else {
				Node.setDataElement(CTRAddlPropsNode, "CTRPropJSON", genFixedAttrJSON[0]);
				Node.setDataElement(CTRAddlPropsNode, "CustPropJSON", custAttrJSONString);
				Node.setDataElement(CTRAddlPropsNode, "FixedPropJSON", genFixedAttrJSON[1]);
			}
			
			UpdateCTRAddlPropsRequest.addParameterAsXml(CTRAddlPropsId);
			UpdateCTRAddlPropsRequest.addParameterAsXml(CTRAddlPropsNode);

			UpdateCTRAddlPropsRequest.sendAndWait();
			
		} catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		}finally {
			Utilities.cleanAll(contractIDNode, CTRAddlPropsNode);
			}
	}


	public static void UpdateCTRDataAsJSON(String contractItemID, String ctrAddlPropsID, String attrType,
			int generalAttrXML, int custAttrXML){
		
		int response = 0;
		String relatedCTRPropsItemId1 = null, genAttrJSONString = "{}", custAttrJSONString = "{}";
		String [] genFixedAttrJSON = {"{}" , "{}"};
		try {

			if (!attrType.equalsIgnoreCase(ContractConstants.FIXED)) {
				if (custAttrXML != 0 && !attrType.equalsIgnoreCase(ContractConstants.GENERAL)) {
					custAttrJSONString = formCustomAttrJSON(custAttrXML, contractItemID);
				}
				if (generalAttrXML != 0 && !attrType.equalsIgnoreCase(ContractConstants.CUSTOM)) {
					// genAttrJSONString = formGeneralAttrJSON(generalAttrXML, processType);
					genFixedAttrJSON = formGeneralAttrJSON(generalAttrXML, attrType);
				}
			} else {
				// genAttrJSONString = formGeneralAttrJSON(generalAttrXML, processType);
				genFixedAttrJSON = formFixedAttrJSON(generalAttrXML, ctrAddlPropsID);
			}
			
					

			if (Objects.isNull(ctrAddlPropsID) || ctrAddlPropsID.isEmpty()) {

				relatedCTRPropsItemId1 = getRelatedCtrAddPropsId(contractItemID);

				if (Objects.isNull(relatedCTRPropsItemId1)) {
					createCTRAddlPropsJSON(contractItemID, genFixedAttrJSON, custAttrJSONString);
					return;
				}
				ctrAddlPropsID = relatedCTRPropsItemId1;
			}
			updateCTRAddlPropsJSON(contractItemID, ctrAddlPropsID, genFixedAttrJSON, custAttrJSONString ,attrType);

		}catch (Exception e) {
			logger._log("com.opentext.apps.cc.custom.StoreJSON", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
		} finally {
			Utilities.cleanAll(response);
		}
	}

	public static BusObjectIterator<com.opentext.apps.cc.custom.StoreJSON> getStoreJSONObjects(String contractID,
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
