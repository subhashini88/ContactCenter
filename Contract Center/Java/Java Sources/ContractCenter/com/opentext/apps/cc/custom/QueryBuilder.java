/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.cc.custom;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.Calendar;
import java.util.Objects;

import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.eibus.xml.nom.Node;
import com.opentext.apps.cc.custom.dao.CCCustomJsonDao;
import com.opentext.apps.cc.custom.exceptions.ContractCenterAlertMessages;
import com.opentext.apps.cc.custom.querybuilder.builder.IQueryBuilder;
import com.opentext.apps.cc.custom.querybuilder.builder.QueryBuilderFactory;
import com.opentext.apps.cc.custom.querybuilder.builder.QueryDataBuilderUtil;
import com.opentext.apps.cc.custom.querybuilder.builder.data.SearchQueryData;
import com.opentext.apps.cc.custom.querybuilder.search.SearchServices;

public class QueryBuilder extends QueryBuilderBase {

	private static final CordysLogger logger = CordysLogger.getCordysLogger(Utilities.class);
	private static final String solutionName = "OpenTextContractCenter";
	private static final String entityName = "CTRAddlProps";

	public QueryBuilder() {
		this((BusObjectConfig) null);
	}

	public QueryBuilder(BusObjectConfig config) {
		super(config);
	}

	public static BusObjectIterator<com.opentext.apps.cc.custom.QueryBuilder> getQueryBuilderObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public static String getContractJsonData(String inputXml) {

		SearchQueryData data = null;
		try {
			data = QueryDataBuilderUtil.buildSearchQueryData(inputXml);
			IQueryBuilder queryBuilder = QueryBuilderFactory.getQueryBulder(QueryBuilderFactory.DB_POSTGRES);
			queryBuilder.addTableName("o2opentextcontractcenterctraddlprops");
			queryBuilder.setJsonColumnName("ctrpropjson");
			IQueryBuilder queryBuilder1 = queryBuilder.buildQuery(data);
			String sql = queryBuilder1.getSqlQuery();
			CCCustomJsonDao ccCustomJsonDao = new CCCustomJsonDao();
			String res = ccCustomJsonDao.getContractObjects(sql);
			return res;
		} catch (SAXException | IOException | ParserConfigurationException e) {
		}
		return null;
	}

	public static String getContractJsonData(String inputXml, int xmlNomNode, int limit, int offset) {

		SearchQueryData data = null;
		try {
			int childNode = Node.getFirstChild(xmlNomNode);
			String value = Node.writeToString(childNode, true);
			data = QueryDataBuilderUtil.buildSearchQueryData(value);
			String dbType = getDbType();
			String tableName = getTableName();
			String orgId = tableName.toLowerCase().split("opentextcontractcenterctraddlprops")[0];
			IQueryBuilder queryBuilder = QueryBuilderFactory.getQueryBulder(dbType);
			if (!Objects.nonNull(tableName)) {
				throw new NullPointerException();
			}
			queryBuilder.addOrgId(orgId);
			queryBuilder.addTableName(tableName);
			queryBuilder.setJsonColumnName("ctrpropjson");
			queryBuilder.setJsonCustomColumnName("custpropjson");
			queryBuilder.setJsonFixedColumnName("fixedpropjson");
			IQueryBuilder queryBuilder1 = queryBuilder.buildQuery(data);
			String sql = queryBuilder1.getSqlQuery();
			queryBuilder.clear();

			CCCustomJsonDao ccCustomJsonDao = new CCCustomJsonDao();
			int count = ccCustomJsonDao.getContractJsonTotalCount(sql);
			queryBuilder.setLimit(limit > 0 ? limit : 25);
			queryBuilder.setOffset(offset);
			queryBuilder1 = queryBuilder.buildQuery(data);
			sql = queryBuilder1.getSqlQuery();

			String res = ccCustomJsonDao.getContractObjects(sql);
			if (res.toString().isEmpty()) {
				return "{\"count\":" + count + ",\"data\":[]}";
			} else {
				return "{\"count\":" + count + ",\"time\": \"" + Calendar.getInstance().getTimeInMillis()
						+ "\" ,\"data\":" + res + "}";
			}
		} catch (SAXException | IOException | ParserConfigurationException | NullPointerException e) {
			logger._log("com.opentext.apps.cc.custom.QueryBuilder", Severity.ERROR, e,
					ContractCenterAlertMessages.ERROR_WHILE_EXECUTING);
			return null;
		}
	}

	public static int getContractJsonCount() {
		int res = 0;
		try {
			CCCustomJsonDao ccCustomJsonDao = new CCCustomJsonDao();
			res = ccCustomJsonDao.getContractJsonTotalCount();
		} finally {
		}
		return res;
	}

	public static String getContractSearchResults(String id, String inputQuery, int limit, int offset) {

		SearchServices s = new SearchServices(Integer.parseInt(id));
		int xmlReq = s.parseSearchRequest(s.readSavedSearchExpression());
		return getContractJsonData(null, xmlReq, limit, offset);
	}

	private static String getDbType() {
		String dbType = QueryBuilderFactory.DB_POSTGRES;
		try {
			SOAPRequestObject GCPropsRequest = new SOAPRequestObject("http://schemas.cordys.com/WS-AppServer/1.0",
					"DataBaseInfo", null, null);
			int response = GCPropsRequest.sendAndWait();
			String type = Node.getDataWithDefault(NomUtil.getNode(".//tuple/old//BackEndInfo//dbProductName", response),
					null);
			if (!type.contains("PostgreSQL")) {
				dbType = QueryBuilderFactory.DB_MSSQL;
			}
		} catch (Exception e) {
		}

		return dbType;
	}

	private static String getTableName() {
		return Utilities.getTableName(solutionName, entityName);
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
