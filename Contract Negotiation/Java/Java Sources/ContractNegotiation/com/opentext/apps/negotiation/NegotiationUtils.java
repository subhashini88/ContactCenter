/*
  This class has been generated by the Code Generator
*/

package com.opentext.apps.negotiation;

import com.cordys.cpc.bsf.busobject.BusObjectConfig;
import com.cordys.cpc.bsf.busobject.BusObjectIterator;
import com.cordys.cpc.bsf.soap.SOAPRequestObject;
import com.eibus.xml.nom.Node;
import com.eibus.util.logger.CordysLogger;
import com.eibus.util.logger.Severity;
import com.opentext.apps.cc.custom.NomUtil;
import com.opentext.apps.cc.custom.Utilities;

public class NegotiationUtils extends NegotiationUtilsBase {

	private static final CordysLogger LOGGER = CordysLogger.getCordysLogger(NegotiationUtils.class);

	public NegotiationUtils() {
		this((BusObjectConfig) null);
	}

	public NegotiationUtils(BusObjectConfig config) {
		super(config);
	}

	public static int GetContentbyRelatedContentItemID(String relatedContentItemID) {
		int relatedContractContentIdNode = 0, readRelatedContractContentResponse = 0, contentNode = 0;
		try {
			SOAPRequestObject readRelatedContractContentRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractNegotiation/ContractDetails.RelatedContractContent/operations",
					"ReadRelatedContractContent", null, null);
			relatedContractContentIdNode = NomUtil.parseXML("<RelatedContractContent-id></RelatedContractContent-id>");
			Node.setDataElement(relatedContractContentIdNode, "ItemId1", relatedContentItemID);
			readRelatedContractContentRequest.addParameterAsXml(relatedContractContentIdNode);
			readRelatedContractContentResponse = readRelatedContractContentRequest.sendAndWait();
			contentNode = NomUtil
					.parseXML(NomUtil.getData(NomUtil.getNode(".//Content", readRelatedContractContentResponse)));
		} catch (Exception e) {
			LOGGER._log("NegotiationUtils", Severity.ERROR, e,
					"Error while reading content from related contract content.");
		} finally {
			Utilities.cleanAll(relatedContractContentIdNode, readRelatedContractContentResponse);
		}
		return contentNode;
	}

	public static int GetMetaDatabyRelatedContentItemID(String relatedContentItemID) {
		int relatedContractContentIdNode = 0, readRelatedContractContentResponse = 0, metaDataNode = 0;
		try {
			SOAPRequestObject readRelatedContractContentRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractNegotiation/ContractDetails.RelatedContractContent/operations",
					"ReadRelatedContractContent", null, null);
			relatedContractContentIdNode = NomUtil.parseXML("<RelatedContractContent-id></RelatedContractContent-id>");
			Node.setDataElement(relatedContractContentIdNode, "ItemId1", relatedContentItemID);
			readRelatedContractContentRequest.addParameterAsXml(relatedContractContentIdNode);
			readRelatedContractContentResponse = readRelatedContractContentRequest.sendAndWait();
			metaDataNode = NomUtil
					.parseXML(NomUtil.getData(NomUtil.getNode(".//MetaData", readRelatedContractContentResponse)));
		} catch (Exception e) {
			LOGGER._log("NegotiationUtils", Severity.ERROR, e,
					"Error while reading meta data from related contract content.");
		} finally {
			Utilities.cleanAll(relatedContractContentIdNode, readRelatedContractContentResponse);
		}
		return metaDataNode;
	}
	
	public static int GetRuleResultbyRelatedContentItemID(String relatedContentItemID) {
		int relatedContractContentIdNode = 0, readRelatedContractContentResponse = 0, metaDataNode = 0;
		try {
			SOAPRequestObject readRelatedContractContentRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractNegotiation/ContractDetails.RelatedContractContent/operations",
					"ReadRelatedContractContent", null, null);
			relatedContractContentIdNode = NomUtil.parseXML("<RelatedContractContent-id></RelatedContractContent-id>");
			Node.setDataElement(relatedContractContentIdNode, "ItemId1", relatedContentItemID);
			readRelatedContractContentRequest.addParameterAsXml(relatedContractContentIdNode);
			readRelatedContractContentResponse = readRelatedContractContentRequest.sendAndWait();
			metaDataNode = NomUtil
					.parseXML(NomUtil.getData(NomUtil.getNode(".//ContractRuleResultData", readRelatedContractContentResponse)));
		} catch (Exception e) {
			LOGGER._log("NegotiationUtils", Severity.ERROR, e,
					"Error while reading meta data from related contract content.");
		} finally {
			Utilities.cleanAll(relatedContractContentIdNode, readRelatedContractContentResponse);
		}
		return metaDataNode;
	}
	
	public static int GetAccDatabyRelatedContentItemID(String relatedContentItemID) {
		int relatedContractContentIdNode = 0, readRelatedContractContentResponse = 0, accDataNode = 0;
		try {
			SOAPRequestObject readRelatedContractContentRequest = new SOAPRequestObject(
					"http://schemas/OpenTextContractNegotiation/ContractDetails.RelatedContractContent/operations",
					"ReadRelatedContractContent", null, null);
			relatedContractContentIdNode = NomUtil.parseXML("<RelatedContractContent-id></RelatedContractContent-id>");
			Node.setDataElement(relatedContractContentIdNode, "ItemId1", relatedContentItemID);
			readRelatedContractContentRequest.addParameterAsXml(relatedContractContentIdNode);
			readRelatedContractContentResponse = readRelatedContractContentRequest.sendAndWait();
			accDataNode = NomUtil
					.parseXML(NomUtil.getData(NomUtil.getNode(".//AccountData", readRelatedContractContentResponse)));
		} catch (Exception e) {
			LOGGER._log("NegotiationUtils", Severity.ERROR, e,
					"Error while reading account data from related contract content.");
		} finally {
			Utilities.cleanAll(relatedContractContentIdNode, readRelatedContractContentResponse);
		}
		return accDataNode;
	}

	public static BusObjectIterator<com.opentext.apps.negotiation.NegotiationUtils> getNegotiationUtilsObjects(
			com.cordys.cpc.bsf.query.Cursor cursor) {
		// TODO implement body
		return null;
	}

	public void onInsert() {
	}

	public void onUpdate() {
	}

	public void onDelete() {
	}

}
